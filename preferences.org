#+TITLE: My Emacs Configuration
#+STARTUP:  showeverything
#+PROPERTY: :tangle yes :results silent :exports code

* Emacs Configuration
** Packages
*** Base :package:
    First make sure package.el and use-package.el are both installed.
    Install ~use-package~ first with:
    #+BEGIN_SRC emacs-lisp :tangle no
      (package-refresh-contens)
      (package-install 'use-package)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (require 'package)
      (package-initialize)

      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
      (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
      (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

      (require 'use-package)
      (setq use-package-always-ensure t)
    #+END_SRC   
*** Evil                                                               :evil:
**** Leader Key :leader:lsp:counsel:treemacs:
     ~evil-leader~ must be loaded before ~evil~ package.
     #+BEGIN_SRC emacs-lisp
       (use-package evil-leader
	 :config
	 (evil-leader/set-leader "<SPC>")
	 (evil-leader/set-key "SPC" 'counsel-M-x)
	 (evil-leader/set-key "b" 'counsel-switch-buffer)
	 (evil-leader/set-key "f" 'counsel-fzf)
	 (evil-leader/set-key "F" 'counsel-rg)
	 (evil-leader/set-key "p" 'prettier-js)
	 (evil-leader/set-key "." 'lsp-execute-code-action)
	 (evil-leader/set-key "/" 'comment-region)
	 (evil-leader/set-key "t" 'treemacs)
	 (global-evil-leader-mode))
     #+END_SRC
**** Evil                                                      :surround:org:
     #+BEGIN_SRC emacs-lisp
       (use-package evil
	 :after (:all evil-leader)
	 :config
	 (evil-mode 1))

       (use-package evil-surround
	 :config
	 (global-evil-surround-mode 1))

       (use-package evil-org
	 :after (:all evil-leader evil)
	 :hook (org-mode . evil-org-mode))
     #+END_SRC
    
*** Completion :ivy:lsp:
    #+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
  (ivy-mode))

(use-package counsel
  :bind (("M-x" . counsel-M-x)))

(use-package counsel-projectile)

(use-package swiper
  :config
  (global-set-key (kbd "C-s") 'swiper)
  (setq ivy-display-style 'fancy))

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC

*** Appearance
    Install themes and load one. I prefer dark themes in terminal and
    having light themes for GUI Emacs.
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
	:config
	(if (display-graphic-p)
	    (load-theme 'doom-one-light t)
	  (progn
	    (xterm-mouse-mode 1)
	    (load-theme 'doom-Iosvkem t)))

	(doom-themes-visual-bell-config)
	(doom-themes-org-config))

      ;; Doom Modeline 一个还算不错的 Modeline
      (use-package doom-modeline
	:init
	(doom-modeline-mode 1))

      (use-package highlight-indent-guides
	:hook (prog-mode . highlight-indent-guides-mode)
	:hook (web-mode . highlight-indent-guides-mode)
	:config
	(setq highlight-indent-guides-method
	      (if (display-graphic-p) 'bitmap 'character)))

      ;; 彩虹括号
      (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))
    #+END_SRC
*** Programming :programming:
**** Several Modes :typescript:yaml:json:web:
     #+BEGIN_SRC emacs-lisp
       (use-package typescript-mode)
       (use-package yaml-mode)
       (use-package json-mode)
       (use-package web-mode
	 :config
	 (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
	 (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))
     #+END_SRC
**** Code Styles                                      :editorconfig:prettier:
     #+BEGIN_SRC emacs-lisp
       (use-package editorconfig
	 :config (editorconfig-mode 1))

       (use-package prettier-js
	 :hook ((js-mode . prettier-js-mode)
		(typescript-mode . prettier-js-mode)
		(web-mode . prettier-js-mode)))

     #+END_SRC
**** Company and Flycheck                                  :company:flycheck:
     #+BEGIN_SRC emacs-lisp
       (use-package company
	 :hook (after-init . global-company-mode)
	 :config (setq company-tooltip-align-annotations t
		       company-tooltip-limit 10
		       company-show-numbers t
		       company-idle-delay .2
		       company-minimum-prefix-length 1))

       (use-package flycheck
	 :init (setq flycheck-emacs-lisp-load-path 'inherit)
	 :config (global-flycheck-mode))

     #+END_SRC
**** Yasnippet                                                      :snippet:
     #+BEGIN_SRC emacs-lisp
       ;;; Yasnippet
       (use-package yasnippet
	 :config
	 (yas-global-mode 1))

       (use-package yasnippet-snippets
	 :after (yasnippet))

     #+END_SRC
**** LSP Mode                                       :lsp:typescript:treemacs:
     #+BEGIN_SRC emacs-lisp
       ;;; LSP
       (use-package lsp-mode
	 :commands lsp
	 :init (setq lsp-keymap-prefix "C-c l")
	 :hook ((typescript-mode . lsp-deferred)
		(js-mode . lsp-deferred)
		(web-mode . lsp-deferred)
		(lsp-mode . lsp-enable-which-key-integration))
	 :custom (lsp-clients-typescript-server-args
		  '("--stdio"
		    "--tsserver-log-file"
		    "~/.tsserver.log")))

       (use-package lsp-ui :commands lsp-ui-mode)
       (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

     #+END_SRC


*** Misc :misc:
    Load PATH env from shell for GUI Emacs.
    #+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (when (display-graphic-p) (exec-path-from-shell-initialize)))
    #+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package smex :config (smex-initialize))

(use-package which-key :config (which-key-mode))

(use-package magit)

(use-package projectile
  :config
  (setq projectile-cache-file "~/.emacs.d/.cache/projectile.cache")
  (projectile-mode 1)
  (define-key
    projectile-mode-map
    (kbd "M-p")
    'projectile-command-map))

;;; Treemacs
(use-package treemacs)
(use-package treemacs-evil :after (:all treemacs evil))
(use-package treemacs-projectile :after (:all treemacs projectile))
#+END_SRC

** Customization                                                       :init:
   #+BEGIN_SRC emacs-lisp
     ;; Centralize backup files
     (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/.cache/autosaves/" t)))
     (setq make-backup-files nil) ;; Stop making backup files
     (setq create-lockfiles nil) ;; Stop creating lockfiles

     ;; Highlight current line
     ;; (add-hook 'prog-mode-hook 'hl-line-mode 1)

     ;; Line number
     (defvar display-line-numbers-type)
     (setq display-line-numbers-type 'relative)
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
     (add-hook 'text-mode-hook 'display-line-numbers-mode)

     ;; Ruler
     (setq display-fill-column-indicator-column 80)
     (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
     (add-hook 'text-mode-hook 'display-fill-column-indicator-mode)

     ;; Maximized at startup
     (add-hook 'window-setup-hook 'toggle-frame-maximized t)

     ;; Fix mouse scrolling does not work in terminal
     (unless (display-graphic-p)
       (global-set-key (kbd "<mouse-4>") (kbd "<wheel-up>"))
       (global-set-key (kbd "<mouse-5>") (kbd "<wheel-down>")))

     ;; macOS Tweaks
     (when (eq system-type 'darwin)
       ;; Do not swap option and command on macOS
       (setq mac-option-modifier 'meta)
       (setq mac-command-modifier 'hyper)

       ;; Enable ligatures on macOS
       (mac-auto-operator-composition-mode t))

     ;; Bind Command-V to Paste
     (global-set-key (kbd "H-v") 'evil-paste-before)
     (global-set-key (kbd "H-a") 'mark-whole-buffer)
   #+END_SRC
*** Isolate custom.el
    Put ~custom.el~ out of ~init.el~.
    #+BEGIN_SRC emacs-lisp
      (setq custom-file "~/.emacs.d/custom.el")
      (load custom-file)
    #+END_SRC
